<i class="@IconCssClasses"></i>

@code
{
    /// <summary>
    /// Assembles the CSS classes from the parameters
    /// </summary>
    private string IconCssClasses
    {
        get
        {
            string style = $"{CssClassAttribute.GetCssClass(Style)}";
            string fixedWidth = $"{(FixedWidth ? "fa-fw" : string.Empty )}";
            string name = $"{CssClassAttribute.GetCssClass(Name)}";
            string size = $"{CssClassAttribute.GetCssClass(Size)}";
            string rotation = $"{CssClassAttribute.GetCssClass(Rotation)}";
            string animation = $"{CssClassAttribute.GetCssClass(Animation)}";
            string swapOpacity = $"{(SwapOpacity ? "fa-swap-opacity" : string.Empty)}";

            string cssClasses = $"{style} {fixedWidth} {name} {size} {rotation} {animation} {swapOpacity} {CssClass}";

            cssClasses.Trim();
            while(cssClasses.Contains("  "))
            {
                cssClasses = cssClasses.Replace("  ", " ");
            }

            return cssClasses;
        }
    }

    [Parameter()]
    public FaIconStyle Style { get; set; } = FaIconStyle.DuoTone;

    [Parameter()]
    public FaIconName Name { get; set; }

    [Parameter()]
    public FaIconSize Size { get; set; } = FaIconSize.X1;

    [Parameter()]
    public FaIconRotation Rotation { get; set; } = FaIconRotation.None;

    [Parameter()]
    public FaIconAnimation Animation { get; set; } = FaIconAnimation.None;

    [Parameter()]
    public bool FixedWidth { get; set; } = false;

    [Parameter()]
    public bool SwapOpacity { get; set; } = false;

    [Parameter()]
    public string CssClass { get; set; } = string.Empty;

}
